@model IEnumerable<SchoolSurvey.Models.Category>
@using SchoolSurvey;
@using SchoolSurvey.Models;

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        function isCustomAnswer(statementId, answerId) {
            var customAnswerRadioBtn = $('.radioButtonForCustom[name=Statement' + statementId + ']');

            if (!customAnswerRadioBtn.attr('id'))
                return false;

            var customAnswerId = customAnswerRadioBtn.attr('id').replace('RadioButtonFor', '');

            return customAnswerId == answerId;
        }

        function getCustomAnswerTextBox(radioButton) {
            var statementId = radioButton.attr('name').replace('Statement', '');
            var textBox = $('#CustomAnswerFor' + statementId);

            if (textBox.attr('id') == null)
                return null;

            return textBox;
        }

        function getAnswer(statementId) {
            var checkedRadioBtn = $('[name=Statement' + statementId + ']:checked');
            var btnId = checkedRadioBtn.attr('id');

            if (btnId == null) {
                var textBox = $('#CustomAnswerFor' + statementId);

                return {
                    answerId: textBox.attr('answer'),
                    customAnswer: textBox.val(),
                };
            }

            answerId = btnId.replace('RadioButtonFor','');
            var customAnswer = null;

            if (checkedRadioBtn.hasClass('radioButtonForCustom')) {
                customAnswer = getCustomAnswer(statementId);
            }

            return { answerId, customAnswer };
        }

        function getCustomAnswer(statementId) {
            var textBox = $('#CustomAnswerFor' + statementId);

            if (textBox.attr('id') == null)
                return null;

            return textBox.val();
        }

        function navigate(navigateFrom, navigateTo) {
            $('#category' + navigateFrom).hide();
            $('#category' + navigateTo).show();
        }

        function navigateForward(navigateFrom, navigateTo) {
            if (!validateAnswers(navigateFrom)) {
                return;
            }

            navigate(navigateFrom, navigateTo)
        }

        function validateAnswers(category) {
            var statements = $('.statement[category=' + category + "]");
            var invalidAnswers = [];

            for (i = 0; i < statements.length; i++) {
                var statementId = $(statements[i]).attr('id').replace('statement', '');
                if ($('.radioButtonNullable[name = Statement' + statementId + ']').length > 0)
                    continue;

                var answer = getAnswer(statementId);

                if (answer.answerId == null) {
                    invalidAnswers.push(statementId);
                    console.log("neatsakyta " + statementId);
                    continue;
                }

                if (isCustomAnswer(statementId, answer.answerId) && answer.customAnswer.length == 0) {
                    invalidAnswers.push(statementId);
                    console.log("truksta custom ats " + statementId);
                }
            }

            if (invalidAnswers.length == 0)
                return true;

            return false;
        }

        function finish() {
            if (!validateAnswers(2))
                return;

            var statementIds = [];
            var scholarAnswers = [];

            $('.statement').each(function () {
                statementIds.push($(this).attr('id').replace('statement', ''));
            });

            for (i = 0; i < statementIds.length; i++) {
                var answer = getAnswer(statementIds[i]);

                if (answer.answerId != null) {
                    var scholarAnswer = {
                        ScholarId: '@ViewBag.ScholarId',
                        StatementId: statementIds[i],
                        AnswerId: answer.answerId,
                        CustomAnswer: answer.customAnswer
                    };

                    scholarAnswers.push(scholarAnswer);
                }
            }

            console.log(JSON.stringify(scholarAnswers));
            $.ajax({
                url: "@Url.Action("Finish")",
                type: "POST",
                data: JSON.stringify(scholarAnswers),
                contentType: "application/json; charset=utf-8",
                error: function (response) {
                    alert(response.responseText);
                },
                success: function (response) {
                    alert(response);
                }
            });
        }

        $(function () {
            $('.radioButtonForStandard').change(function () {
                var textBox = getCustomAnswerTextBox($(this));

                if (textBox != null)
                    textBox.hide();
            });

            $('.radioButtonForCustom').change(function () {
                var textBox = getCustomAnswerTextBox($(this));

                textBox.show();
            });

            $('.radioButtonNullable').mousedown(function () {
                event.preventDefault();

                var isChecked = $(this).is(':checked');
                $(this).prop('checked', !isChecked);
            });

            $('.radioButtonNullable').click(function () {
                event.preventDefault();
            });
        });
    </script>
}

@{
    var scholar = ViewBag.Scholar;

    if (scholar == null)
    {
        <div class="jumbotron">
            <p>Esate neprisijungęs.</p>

            @Html.ActionLink("Į pradžią", "Index", "Home", new { @class = "btn" })
        </div>

        return;
    }

    ViewBag.ScholarId = scholar.Id;

    <div class="jumbotron">
        <p>Pildote apklausą kaip @scholar.FirstName @scholar.LastName (@scholar.School.Title)</p>
    </div>

    <div class="jumbotron" id="category1">
        @{
            var introCtg = Model.FirstOrDefault(ctg => ctg.Id == 1);


            <button class="btn buttonNavigate" onclick="navigateForward(1, 3)">@Constants.FORWARD_BUTTON_TEXT</button>
            <h2>@introCtg.CategoryPrompt</h2>

            foreach (var statement in introCtg.Statement)
            {
                <p id="statement@{@statement.Id}" class="statement" category ="@{@introCtg.Id}">@statement.Text</p>

                foreach (var answer in statement.Answer)
                {
                    <div>
                        @{
                            var radioBtnHtmlAttributes = new
                            {
                                @id = "RadioButtonFor" + answer.Id,
                                @class = "radioButtonFor" + (answer.IsCustom ? "Custom" : "Standard")
                            };
                        }

                        @Html.RadioButton("Statement" + statement.Id, answer.Id, false, radioBtnHtmlAttributes)
                        @answer.Text

                        @if (answer.IsCustom)
                        {
                            var boxHtmlAttributes = new
                            {
                                placeholder = answer.CustomPrompt,
                                style = "display: none;"
                            };

                            @Html.TextBox("CustomAnswerFor" + statement.Id, null, boxHtmlAttributes);
                        }
                    </div>
                }
            }
        }
    </div>

    foreach (var category in Model.Skip(2))
    {
        var prevCtg = (category.Id == 3 ? 1 : category.Id - 1);
        var nextCtg = (category.Id == Model.Count() ? 2 : category.Id + 1);

        <div class="jumbotron" id="category@{@category.Id}" style="display: none;">
            <button class="btn buttonNavigate" onclick="navigate(@{@category.Id}, @{@prevCtg})">@Constants.BACK_BUTTON_TEXT</button>
            <button class="btn buttonNavigate" onclick="navigateForward(@{@category.Id}, @{@nextCtg})">@Constants.FORWARD_BUTTON_TEXT</button>

            <h2>@category.CategoryPrompt</h2>
            <table>
                <tr>
                    <th />
                    @foreach (var answer in ViewBag.DefaultAnswers)
                    {
                        <th>@answer.Text</th>
                    }
                </tr>
                @foreach (var statement in category.Statement)
                {
                    <tr>
                        <td><p id="statement@{@statement.Id}" class="statement" category ="@{@category.Id}">@statement.Text</p></td>
                        @foreach (Answer answer in ViewBag.DefaultAnswers)
                        {
                            <td>
                                @{
                                    var htmlAttributes = new
                                    {
                                        @id = "RadioButtonFor" + answer.Id,
                                        @class = "radioButton" + (statement.IsNullable ? "Nullable" : "NotNullable")
                                    };
                                }
                                @Html.RadioButton("Statement" + statement.Id, answer.Id, false, htmlAttributes)
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    }

    <div class="jumbotron" id="category2" style="display: none;">
        @{
            <button class="btn buttonNavigate" onclick="navigate(2, @{@Model.Count()})">@Constants.BACK_BUTTON_TEXT</button>

            var suggestionsCtg = Model.FirstOrDefault(ctg => ctg.Id == 2);

            <h2>@suggestionsCtg.CategoryPrompt</h2>

            foreach (var statement in suggestionsCtg.Statement)
            {
                <p id="statement@{@statement.Id}" class="statement" category ="@{@suggestionsCtg.Id}">@statement.Text</p>
                @Html.TextBox("CustomAnswerFor" + statement.Id, null, new { answer = @statement.Answer.FirstOrDefault().Id });
            }

            <button class="btn buttonFinish" onclick="finish()">@Constants.FINISH_BUTTON_TEXT</button>
        }
    </div>
}